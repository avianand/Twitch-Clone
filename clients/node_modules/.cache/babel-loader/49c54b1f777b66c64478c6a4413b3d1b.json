{"ast":null,"code":"var _curry3 = /*#__PURE__*/require('./internal/_curry3'); // `Identity` is a functor that holds a single value, where `map` simply\n// transforms the held value with the provided function.\n\n\nvar Identity = function (x) {\n  return {\n    value: x,\n    map: function (f) {\n      return Identity(f(x));\n    }\n  };\n};\n/**\n * Returns the result of \"setting\" the portion of the given data structure\n * focused by the given lens to the result of applying the given function to\n * the focused value.\n *\n * @func\n * @memberOf R\n * @since v0.16.0\n * @category Object\n * @typedefn Lens s a = Functor f => (a -> f a) -> s -> f s\n * @sig Lens s a -> (a -> a) -> s -> s\n * @param {Lens} lens\n * @param {*} v\n * @param {*} x\n * @return {*}\n * @see R.prop, R.lensIndex, R.lensProp\n * @example\n *\n *      var headLens = R.lensIndex(0);\n *\n *      R.over(headLens, R.toUpper, ['foo', 'bar', 'baz']); //=> ['FOO', 'bar', 'baz']\n */\n\n\nvar over = /*#__PURE__*/_curry3(function over(lens, f, x) {\n  // The value returned by the getter function is first transformed with `f`,\n  // then set as the value of an `Identity`. This is then mapped over with the\n  // setter function of the lens.\n  return lens(function (y) {\n    return Identity(f(y));\n  })(x).value;\n});\n\nmodule.exports = over;","map":{"version":3,"sources":["C:/Users/anand/Documents/Work/twitch/node_modules/ramda/src/over.js"],"names":["_curry3","require","Identity","x","value","map","f","over","lens","y","module","exports"],"mappings":"AAAA,IAAIA,OAAO,GAAG,aAAaC,OAAO,CAAC,oBAAD,CAAlC,C,CAEA;AACA;;;AAGA,IAAIC,QAAQ,GAAG,UAAUC,CAAV,EAAa;AAC1B,SAAO;AAAEC,IAAAA,KAAK,EAAED,CAAT;AAAYE,IAAAA,GAAG,EAAE,UAAUC,CAAV,EAAa;AACjC,aAAOJ,QAAQ,CAACI,CAAC,CAACH,CAAD,CAAF,CAAf;AACD;AAFI,GAAP;AAGD,CAJD;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,IAAII,IAAI,GAAG,aAAaP,OAAO,CAAC,SAASO,IAAT,CAAcC,IAAd,EAAoBF,CAApB,EAAuBH,CAAvB,EAA0B;AACxD;AACA;AACA;AACA,SAAOK,IAAI,CAAC,UAAUC,CAAV,EAAa;AACvB,WAAOP,QAAQ,CAACI,CAAC,CAACG,CAAD,CAAF,CAAf;AACD,GAFU,CAAJ,CAEJN,CAFI,EAEDC,KAFN;AAGD,CAP8B,CAA/B;;AAQAM,MAAM,CAACC,OAAP,GAAiBJ,IAAjB","sourcesContent":["var _curry3 = /*#__PURE__*/require('./internal/_curry3');\n\n// `Identity` is a functor that holds a single value, where `map` simply\n// transforms the held value with the provided function.\n\n\nvar Identity = function (x) {\n  return { value: x, map: function (f) {\n      return Identity(f(x));\n    } };\n};\n\n/**\n * Returns the result of \"setting\" the portion of the given data structure\n * focused by the given lens to the result of applying the given function to\n * the focused value.\n *\n * @func\n * @memberOf R\n * @since v0.16.0\n * @category Object\n * @typedefn Lens s a = Functor f => (a -> f a) -> s -> f s\n * @sig Lens s a -> (a -> a) -> s -> s\n * @param {Lens} lens\n * @param {*} v\n * @param {*} x\n * @return {*}\n * @see R.prop, R.lensIndex, R.lensProp\n * @example\n *\n *      var headLens = R.lensIndex(0);\n *\n *      R.over(headLens, R.toUpper, ['foo', 'bar', 'baz']); //=> ['FOO', 'bar', 'baz']\n */\nvar over = /*#__PURE__*/_curry3(function over(lens, f, x) {\n  // The value returned by the getter function is first transformed with `f`,\n  // then set as the value of an `Identity`. This is then mapped over with the\n  // setter function of the lens.\n  return lens(function (y) {\n    return Identity(f(y));\n  })(x).value;\n});\nmodule.exports = over;"]},"metadata":{},"sourceType":"script"}