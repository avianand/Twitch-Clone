{"ast":null,"code":"import { SIGN_IN, SIGN_OUT, CREATE_STREAM, DELETE_STREAM, EDIT_STREAM, FETCH_STREAM, FETCH_STREAMS } from \"./types\";\nimport stream from \"../apis/streams\";\nimport history from \"../history\";\nexport const createStream = formValues => async (dispatch, getState) => {\n  const {\n    userId\n  } = getState().auth;\n  const response = await stream.post(\"/streams\", { ...formValues,\n    userId\n  });\n  dispatch({\n    type: CREATE_STREAM,\n    payload: response.data\n  });\n  history.push(\"/\");\n};\nexport const editStream = (id, formValues) => async (dispatch, getState) => {\n  console.log(\"edit stream invoked\");\n  const response = await stream.put(`/streams/${id}`, formValues);\n  dispatch({\n    type: EDIT_STREAM,\n    payload: response.data\n  });\n  history.push(\"/\");\n};\nexport const deleteStream = id => async (dispatch, getState) => {\n  const response = await stream.delete(`/streams/${id}`);\n  dispatch({\n    type: DELETE_STREAM,\n    payload: id\n  });\n};\nexport const getStream = id => async (dispatch, getState) => {\n  const response = await stream.get(`/streams/${id}`);\n  dispatch({\n    type: FETCH_STREAM,\n    payload: response.data\n  });\n};\nexport const getStreams = () => async (dispatch, getState) => {\n  const response = await stream.get(\"/streams\");\n  dispatch({\n    type: FETCH_STREAMS,\n    payload: response.data\n  });\n};\nexport const signIn = userId => {\n  return {\n    type: SIGN_IN,\n    payload: userId\n  };\n};\nexport const signOut = id => {\n  return {\n    type: SIGN_OUT\n  };\n};","map":{"version":3,"sources":["C:/Users/anand/Documents/Work/Twitch-Clone/client/src/actions/index.js"],"names":["SIGN_IN","SIGN_OUT","CREATE_STREAM","DELETE_STREAM","EDIT_STREAM","FETCH_STREAM","FETCH_STREAMS","stream","history","createStream","formValues","dispatch","getState","userId","auth","response","post","type","payload","data","push","editStream","id","console","log","put","deleteStream","delete","getStream","get","getStreams","signIn","signOut"],"mappings":"AAAA,SACEA,OADF,EAEEC,QAFF,EAGEC,aAHF,EAIEC,aAJF,EAKEC,WALF,EAMEC,YANF,EAOEC,aAPF,QAQO,SARP;AASA,OAAOC,MAAP,MAAmB,iBAAnB;AACA,OAAOC,OAAP,MAAoB,YAApB;AAEA,OAAO,MAAMC,YAAY,GAAIC,UAAD,IAAgB,OAAOC,QAAP,EAAiBC,QAAjB,KAA8B;AACxE,QAAM;AAAEC,IAAAA;AAAF,MAAaD,QAAQ,GAAGE,IAA9B;AACA,QAAMC,QAAQ,GAAG,MAAMR,MAAM,CAACS,IAAP,CAAY,UAAZ,EAAwB,EAC7C,GAAGN,UAD0C;AAE7CG,IAAAA;AAF6C,GAAxB,CAAvB;AAIAF,EAAAA,QAAQ,CAAC;AAAEM,IAAAA,IAAI,EAAEf,aAAR;AAAuBgB,IAAAA,OAAO,EAAEH,QAAQ,CAACI;AAAzC,GAAD,CAAR;AACAX,EAAAA,OAAO,CAACY,IAAR,CAAa,GAAb;AACD,CARM;AAUP,OAAO,MAAMC,UAAU,GAAG,CAACC,EAAD,EAAKZ,UAAL,KAAoB,OAAOC,QAAP,EAAiBC,QAAjB,KAA8B;AAC1EW,EAAAA,OAAO,CAACC,GAAR,CAAY,qBAAZ;AACA,QAAMT,QAAQ,GAAG,MAAMR,MAAM,CAACkB,GAAP,CAAY,YAAWH,EAAG,EAA1B,EAA6BZ,UAA7B,CAAvB;AACAC,EAAAA,QAAQ,CAAC;AAAEM,IAAAA,IAAI,EAAEb,WAAR;AAAqBc,IAAAA,OAAO,EAAEH,QAAQ,CAACI;AAAvC,GAAD,CAAR;AACAX,EAAAA,OAAO,CAACY,IAAR,CAAa,GAAb;AACD,CALM;AAOP,OAAO,MAAMM,YAAY,GAAIJ,EAAD,IAAQ,OAAOX,QAAP,EAAiBC,QAAjB,KAA8B;AAChE,QAAMG,QAAQ,GAAG,MAAMR,MAAM,CAACoB,MAAP,CAAe,YAAWL,EAAG,EAA7B,CAAvB;AACAX,EAAAA,QAAQ,CAAC;AAAEM,IAAAA,IAAI,EAAEd,aAAR;AAAuBe,IAAAA,OAAO,EAAEI;AAAhC,GAAD,CAAR;AACD,CAHM;AAKP,OAAO,MAAMM,SAAS,GAAIN,EAAD,IAAQ,OAAOX,QAAP,EAAiBC,QAAjB,KAA8B;AAC7D,QAAMG,QAAQ,GAAG,MAAMR,MAAM,CAACsB,GAAP,CAAY,YAAWP,EAAG,EAA1B,CAAvB;AACAX,EAAAA,QAAQ,CAAC;AAAEM,IAAAA,IAAI,EAAEZ,YAAR;AAAsBa,IAAAA,OAAO,EAAEH,QAAQ,CAACI;AAAxC,GAAD,CAAR;AACD,CAHM;AAKP,OAAO,MAAMW,UAAU,GAAG,MAAM,OAAOnB,QAAP,EAAiBC,QAAjB,KAA8B;AAC5D,QAAMG,QAAQ,GAAG,MAAMR,MAAM,CAACsB,GAAP,CAAW,UAAX,CAAvB;AAEAlB,EAAAA,QAAQ,CAAC;AAAEM,IAAAA,IAAI,EAAEX,aAAR;AAAuBY,IAAAA,OAAO,EAAEH,QAAQ,CAACI;AAAzC,GAAD,CAAR;AACD,CAJM;AAMP,OAAO,MAAMY,MAAM,GAAIlB,MAAD,IAAY;AAChC,SAAO;AACLI,IAAAA,IAAI,EAAEjB,OADD;AAELkB,IAAAA,OAAO,EAAEL;AAFJ,GAAP;AAID,CALM;AAOP,OAAO,MAAMmB,OAAO,GAAIV,EAAD,IAAQ;AAC7B,SAAO;AACLL,IAAAA,IAAI,EAAEhB;AADD,GAAP;AAGD,CAJM","sourcesContent":["import {\r\n  SIGN_IN,\r\n  SIGN_OUT,\r\n  CREATE_STREAM,\r\n  DELETE_STREAM,\r\n  EDIT_STREAM,\r\n  FETCH_STREAM,\r\n  FETCH_STREAMS,\r\n} from \"./types\";\r\nimport stream from \"../apis/streams\";\r\nimport history from \"../history\";\r\n\r\nexport const createStream = (formValues) => async (dispatch, getState) => {\r\n  const { userId } = getState().auth;\r\n  const response = await stream.post(\"/streams\", {\r\n    ...formValues,\r\n    userId,\r\n  });\r\n  dispatch({ type: CREATE_STREAM, payload: response.data });\r\n  history.push(\"/\");\r\n};\r\n\r\nexport const editStream = (id, formValues) => async (dispatch, getState) => {\r\n  console.log(\"edit stream invoked\");\r\n  const response = await stream.put(`/streams/${id}`, formValues);\r\n  dispatch({ type: EDIT_STREAM, payload: response.data });\r\n  history.push(\"/\");\r\n};\r\n\r\nexport const deleteStream = (id) => async (dispatch, getState) => {\r\n  const response = await stream.delete(`/streams/${id}`);\r\n  dispatch({ type: DELETE_STREAM, payload: id });\r\n};\r\n\r\nexport const getStream = (id) => async (dispatch, getState) => {\r\n  const response = await stream.get(`/streams/${id}`);\r\n  dispatch({ type: FETCH_STREAM, payload: response.data });\r\n};\r\n\r\nexport const getStreams = () => async (dispatch, getState) => {\r\n  const response = await stream.get(\"/streams\");\r\n\r\n  dispatch({ type: FETCH_STREAMS, payload: response.data });\r\n};\r\n\r\nexport const signIn = (userId) => {\r\n  return {\r\n    type: SIGN_IN,\r\n    payload: userId,\r\n  };\r\n};\r\n\r\nexport const signOut = (id) => {\r\n  return {\r\n    type: SIGN_OUT,\r\n  };\r\n};\r\n"]},"metadata":{},"sourceType":"module"}